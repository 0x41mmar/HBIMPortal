{"version":3,"sources":["webpack:///./src/client/viewer.components/Viewer.Extensions.Dynamic/Viewing.Extension.IoT/IoT.Graph/smoothie.js?0fbc","webpack:///./src/client/viewer.components/Viewer.Extensions.Dynamic/Viewing.Extension.IoT/IoT.Graph/index.js?d507","webpack:///./src/client/viewer.components/Viewer.Extensions.Dynamic/Viewing.Extension.IoT/IoT.Graph/IoT.Graph.js?f9b5"],"names":["exports","Util","extend","arguments","i","length","key","hasOwnProperty","Array","TimeSeries","options","defaultOptions","clear","resetBoundsInterval","resetBounds","prototype","data","maxValue","Number","NaN","minValue","value","append","timestamp","sumRepeatedTimeStampValues","splice","push","isNaN","Math","max","min","dropOldData","oldestValidTime","maxDataSetLength","removeCount","SmoothieChart","defaultChartOptions","seriesSet","currentValueRange","currentVisMinValue","lastRenderTimeMillis","millisPerPixel","enableDpiScaling","yMinFormatter","precision","parseFloat","toFixed","yMaxFormatter","maxValueScale","interpolation","scaleSmoothing","grid","fillStyle","strokeStyle","lineWidth","sharpLines","millisPerLine","verticalSections","borderVisible","labels","disabled","fontSize","fontFamily","horizontalLines","AnimateCompatibility","requestAnimationFrame","callback","element","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","Date","getTime","call","cancelAnimationFrame","id","clearTimeout","defaultSeriesPresentationOptions","addTimeSeries","timeSeries","resetBoundsTimerId","setInterval","removeTimeSeries","numSeries","clearInterval","getTimeSeriesOptions","bringToFront","set","streamTo","canvas","delayMillis","delay","start","resize","devicePixelRatio","dpr","width","parseInt","getAttribute","height","originalWidth","floor","setAttribute","toString","style","getContext","scale","originalHeight","frame","animate","render","bind","stop","updateValueRange","chartOptions","chartMaxValue","chartMinValue","d","yRangeFunction","range","targetValueRange","valueRangeDiff","minValueDiff","isAnimatingScale","abs","valueRange","time","nowMillis","maxIdleMillis","context","dimensions","top","left","clientWidth","clientHeight","valueToYPixel","offset","round","timeToXPixel","t","font","save","translate","beginPath","rect","clip","clearRect","fillRect","restore","gx","moveTo","lineTo","stroke","closePath","v","gy","strokeRect","hl","line","hly","color","dataSet","seriesOptions","firstX","lastX","lastY","x","y","bezierCurveTo","fill","maxValueString","minValueString","fillText","measureText","timestampFormatter","textUntilX","tx","ts","tsWidth","timeFormatter","date","pad2","number","getHours","getMinutes","getSeconds","IoTGraph","state","thresholdSeries","dataSeries","chart","props","intervalId","updateGraph","guid","threshold","randomBase","random","randomRange","setState","label","tagId","name","div","Component"],"mappings":"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","file":"57.js","sourcesContent":["// MIT License:\r\n//\r\n// Copyright (c) 2010-2013, Joe Walnes\r\n//               2013-2014, Drew Noakes\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n\r\n/**\r\n * Smoothie Charts - http://smoothiecharts.org/\r\n * (c) 2010-2013, Joe Walnes\r\n *     2013-2014, Drew Noakes\r\n *\r\n * v1.0: Main charting library, by Joe Walnes\r\n * v1.1: Auto scaling of axis, by Neil Dunn\r\n * v1.2: fps (frames per second) option, by Mathias Petterson\r\n * v1.3: Fix for divide by zero, by Paul Nikitochkin\r\n * v1.4: Set minimum, top-scale padding, remove timeseries, add optional timer to reset bounds, by Kelley Reynolds\r\n * v1.5: Set default frames per second to 50... smoother.\r\n *       .start(), .stop() methods for conserving CPU, by Dmitry Vyal\r\n *       options.interpolation = 'bezier' or 'line', by Dmitry Vyal\r\n *       options.maxValue to fix scale, by Dmitry Vyal\r\n * v1.6: minValue/maxValue will always get converted to floats, by Przemek Matylla\r\n * v1.7: options.grid.fillStyle may be a transparent color, by Dmitry A. Shashkin\r\n *       Smooth rescaling, by Kostas Michalopoulos\r\n * v1.8: Set max length to customize number of live points in the dataset with options.maxDataSetLength, by Krishna Narni\r\n * v1.9: Display timestamps along the bottom, by Nick and Stev-io\r\n *       (https://groups.google.com/forum/?fromgroups#!topic/smoothie-charts/-Ywse8FCpKI%5B1-25%5D)\r\n *       Refactored by Krishna Narni, to support timestamp formatting function\r\n * v1.10: Switch to requestAnimationFrame, removed the now obsoleted options.fps, by Gergely Imreh\r\n * v1.11: options.grid.sharpLines option added, by @drewnoakes\r\n *        Addressed warning seen in Firefox when seriesOption.fillStyle undefined, by @drewnoakes\r\n * v1.12: Support for horizontalLines added, by @drewnoakes\r\n *        Support for yRangeFunction callback added, by @drewnoakes\r\n * v1.13: Fixed typo (#32), by @alnikitich\r\n * v1.14: Timer cleared when last TimeSeries removed (#23), by @davidgaleano\r\n *        Fixed diagonal line on chart at start/end of data stream, by @drewnoakes\r\n * v1.15: Support for npm package (#18), by @dominictarr\r\n *        Fixed broken removeTimeSeries function (#24) by @davidgaleano\r\n *        Minor performance and tidying, by @drewnoakes\r\n * v1.16: Bug fix introduced in v1.14 relating to timer creation/clearance (#23), by @drewnoakes\r\n *        TimeSeries.append now deals with out-of-order timestamps, and can merge duplicates, by @zacwitte (#12)\r\n *        Documentation and some local variable renaming for clarity, by @drewnoakes\r\n * v1.17: Allow control over font size (#10), by @drewnoakes\r\n *        Timestamp text won't overlap, by @drewnoakes\r\n * v1.18: Allow control of max/min label precision, by @drewnoakes\r\n *        Added 'borderVisible' chart option, by @drewnoakes\r\n *        Allow drawing series with fill but no stroke (line), by @drewnoakes\r\n * v1.19: Avoid unnecessary repaints, and fixed flicker in old browsers having multiple charts in document (#40), by @asbai\r\n * v1.20: Add SmoothieChart.getTimeSeriesOptions and SmoothieChart.bringToFront functions, by @drewnoakes\r\n * v1.21: Add 'step' interpolation mode, by @drewnoakes\r\n * v1.22: Add support for different pixel ratios. Also add optional y limit formatters, by @copacetic\r\n * v1.23: Fix bug introduced in v1.22 (#44), by @drewnoakes\r\n * v1.24: Fix bug introduced in v1.23, re-adding parseFloat to y-axis formatter defaults, by @siggy_sf\r\n * v1.25: Fix bug seen when adding a data point to TimeSeries which is older than the current data, by @Nking92\r\n *        Draw time labels on top of series, by @comolosabia\r\n *        Add TimeSeries.clear function, by @drewnoakes\r\n * v1.26: Add support for resizing on high device pixel ratio screens, by @copacetic\r\n * v1.27: Fix bug introduced in v1.26 for non whole number devicePixelRatio values, by @zmbush\r\n */\r\n\r\n;(function(exports) {\r\n\r\n  var Util = {\r\n    extend: function() {\r\n      arguments[0] = arguments[0] || {};\r\n      for (var i = 1; i < arguments.length; i++)\r\n      {\r\n        for (var key in arguments[i])\r\n        {\r\n          if (arguments[i].hasOwnProperty(key))\r\n          {\r\n            if (typeof(arguments[i][key]) === 'object') {\r\n              if (arguments[i][key] instanceof Array) {\r\n                arguments[0][key] = arguments[i][key];\r\n              } else {\r\n                arguments[0][key] = Util.extend(arguments[0][key], arguments[i][key]);\r\n              }\r\n            } else {\r\n              arguments[0][key] = arguments[i][key];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return arguments[0];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Initialises a new <code>TimeSeries</code> with optional data options.\r\n   *\r\n   * Options are of the form (defaults shown):\r\n   *\r\n   * <pre>\r\n   * {\r\n   *   resetBounds: true,        // enables/disables automatic scaling of the y-axis\r\n   *   resetBoundsInterval: 3000 // the period between scaling calculations, in millis\r\n   * }\r\n   * </pre>\r\n   *\r\n   * Presentation options for TimeSeries are specified as an argument to <code>SmoothieChart.addTimeSeries</code>.\r\n   *\r\n   * @constructor\r\n   */\r\n  function TimeSeries(options) {\r\n    this.options = Util.extend({}, TimeSeries.defaultOptions, options);\r\n    this.clear();\r\n  }\r\n\r\n  TimeSeries.defaultOptions = {\r\n    resetBoundsInterval: 3000,\r\n    resetBounds: true\r\n  };\r\n\r\n  /**\r\n   * Clears all data and state from this TimeSeries object.\r\n   */\r\n  TimeSeries.prototype.clear = function() {\r\n    this.data = [];\r\n    this.maxValue = Number.NaN; // The maximum value ever seen in this TimeSeries.\r\n    this.minValue = Number.NaN; // The minimum value ever seen in this TimeSeries.\r\n  };\r\n\r\n  /**\r\n   * Recalculate the min/max values for this <code>TimeSeries</code> object.\r\n   *\r\n   * This causes the graph to scale itself in the y-axis.\r\n   */\r\n  TimeSeries.prototype.resetBounds = function() {\r\n    if (this.data.length) {\r\n      // Walk through all data points, finding the min/max value\r\n      this.maxValue = this.data[0][1];\r\n      this.minValue = this.data[0][1];\r\n      for (var i = 1; i < this.data.length; i++) {\r\n        var value = this.data[i][1];\r\n        if (value > this.maxValue) {\r\n          this.maxValue = value;\r\n        }\r\n        if (value < this.minValue) {\r\n          this.minValue = value;\r\n        }\r\n      }\r\n    } else {\r\n      // No data exists, so set min/max to NaN\r\n      this.maxValue = Number.NaN;\r\n      this.minValue = Number.NaN;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Adds a new data point to the <code>TimeSeries</code>, preserving chronological order.\r\n   *\r\n   * @param timestamp the position, in time, of this data point\r\n   * @param value the value of this data point\r\n   * @param sumRepeatedTimeStampValues if <code>timestamp</code> has an exact match in the series, this flag controls\r\n   * whether it is replaced, or the values summed (defaults to false.)\r\n   */\r\n  TimeSeries.prototype.append = function(timestamp, value, sumRepeatedTimeStampValues) {\r\n    // Rewind until we hit an older timestamp\r\n    var i = this.data.length - 1;\r\n    while (i >= 0 && this.data[i][0] > timestamp) {\r\n      i--;\r\n    }\r\n\r\n    if (i === -1) {\r\n      // This new item is the oldest data\r\n      this.data.splice(0, 0, [timestamp, value]);\r\n    } else if (this.data.length > 0 && this.data[i][0] === timestamp) {\r\n      // Update existing values in the array\r\n      if (sumRepeatedTimeStampValues) {\r\n        // Sum this value into the existing 'bucket'\r\n        this.data[i][1] += value;\r\n        value = this.data[i][1];\r\n      } else {\r\n        // Replace the previous value\r\n        this.data[i][1] = value;\r\n      }\r\n    } else if (i < this.data.length - 1) {\r\n      // Splice into the correct position to keep timestamps in order\r\n      this.data.splice(i + 1, 0, [timestamp, value]);\r\n    } else {\r\n      // Add to the end of the array\r\n      this.data.push([timestamp, value]);\r\n    }\r\n\r\n    this.maxValue = isNaN(this.maxValue) ? value : Math.max(this.maxValue, value);\r\n    this.minValue = isNaN(this.minValue) ? value : Math.min(this.minValue, value);\r\n  };\r\n\r\n  TimeSeries.prototype.dropOldData = function(oldestValidTime, maxDataSetLength) {\r\n    // We must always keep one expired data point as we need this to draw the\r\n    // line that comes into the chart from the left, but any points prior to that can be removed.\r\n    var removeCount = 0;\r\n    while (this.data.length - removeCount >= maxDataSetLength && this.data[removeCount + 1][0] < oldestValidTime) {\r\n      removeCount++;\r\n    }\r\n    if (removeCount !== 0) {\r\n      this.data.splice(0, removeCount);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Initialises a new <code>SmoothieChart</code>.\r\n   *\r\n   * Options are optional, and should be of the form below. Just specify the values you\r\n   * need and the rest will be given sensible defaults as shown:\r\n   *\r\n   * <pre>\r\n   * {\r\n   *   minValue: undefined,                      // specify to clamp the lower y-axis to a given value\r\n   *   maxValue: undefined,                      // specify to clamp the upper y-axis to a given value\r\n   *   maxValueScale: 1,                         // allows proportional padding to be added above the chart. for 10% padding, specify 1.1.\r\n   *   yRangeFunction: undefined,                // function({min: , max: }) { return {min: , max: }; }\r\n   *   scaleSmoothing: 0.125,                    // controls the rate at which y-value zoom animation occurs\r\n   *   millisPerPixel: 20,                       // sets the speed at which the chart pans by\r\n   *   enableDpiScaling: true,                   // support rendering at different DPI depending on the device\r\n   *   yMinFormatter: function(min, precision) { // callback function that formats the min y value label\r\n   *     return parseFloat(min).toFixed(precision);\r\n   *   },\r\n   *   yMaxFormatter: function(max, precision) { // callback function that formats the max y value label\r\n   *     return parseFloat(max).toFixed(precision);\r\n   *   },\r\n   *   maxDataSetLength: 2,\r\n   *   interpolation: 'bezier'                   // one of 'bezier', 'linear', or 'step'\r\n   *   timestampFormatter: null,                 // optional function to format time stamps for bottom of chart\r\n   *                                             // you may use SmoothieChart.timeFormatter, or your own: function(date) { return ''; }\r\n   *   horizontalLines: [],                      // [ { value: 0, color: '#ffffff', lineWidth: 1 } ]\r\n   *   grid:\r\n   *   {\r\n   *     fillStyle: '#000000',                   // the background colour of the chart\r\n   *     lineWidth: 1,                           // the pixel width of grid lines\r\n   *     strokeStyle: '#777777',                 // colour of grid lines\r\n   *     millisPerLine: 1000,                    // distance between vertical grid lines\r\n   *     sharpLines: false,                      // controls whether grid lines are 1px sharp, or softened\r\n   *     verticalSections: 2,                    // number of vertical sections marked out by horizontal grid lines\r\n   *     borderVisible: true                     // whether the grid lines trace the border of the chart or not\r\n   *   },\r\n   *   labels\r\n   *   {\r\n   *     disabled: false,                        // enables/disables labels showing the min/max values\r\n   *     fillStyle: '#ffffff',                   // colour for text of labels,\r\n   *     fontSize: 15,\r\n   *     fontFamily: 'sans-serif',\r\n   *     precision: 2\r\n   *   }\r\n   * }\r\n   * </pre>\r\n   *\r\n   * @constructor\r\n   */\r\n  function SmoothieChart(options) {\r\n    this.options = Util.extend({}, SmoothieChart.defaultChartOptions, options);\r\n    this.seriesSet = [];\r\n    this.currentValueRange = 1;\r\n    this.currentVisMinValue = 0;\r\n    this.lastRenderTimeMillis = 0;\r\n  }\r\n\r\n  SmoothieChart.defaultChartOptions = {\r\n    millisPerPixel: 20,\r\n    enableDpiScaling: true,\r\n    yMinFormatter: function(min, precision) {\r\n      return parseFloat(min).toFixed(precision);\r\n    },\r\n    yMaxFormatter: function(max, precision) {\r\n      return parseFloat(max).toFixed(precision);\r\n    },\r\n    maxValueScale: 1,\r\n    interpolation: 'bezier',\r\n    scaleSmoothing: 0.125,\r\n    maxDataSetLength: 2,\r\n    grid: {\r\n      fillStyle: '#000000',\r\n      strokeStyle: '#777777',\r\n      lineWidth: 1,\r\n      sharpLines: false,\r\n      millisPerLine: 1000,\r\n      verticalSections: 2,\r\n      borderVisible: true\r\n    },\r\n    labels: {\r\n      fillStyle: '#ffffff',\r\n      disabled: false,\r\n      fontSize: 10,\r\n      fontFamily: 'monospace',\r\n      precision: 2\r\n    },\r\n    horizontalLines: []\r\n  };\r\n\r\n  // Based on http://inspirit.github.com/jsfeat/js/compatibility.js\r\n  SmoothieChart.AnimateCompatibility = (function() {\r\n    var requestAnimationFrame = function(callback, element) {\r\n          var requestAnimationFrame =\r\n            window.requestAnimationFrame        ||\r\n            window.webkitRequestAnimationFrame  ||\r\n            window.mozRequestAnimationFrame     ||\r\n            window.oRequestAnimationFrame       ||\r\n            window.msRequestAnimationFrame      ||\r\n            function(callback) {\r\n              return window.setTimeout(function() {\r\n                callback(new Date().getTime());\r\n              }, 16);\r\n            };\r\n          return requestAnimationFrame.call(window, callback, element);\r\n        },\r\n        cancelAnimationFrame = function(id) {\r\n          var cancelAnimationFrame =\r\n            window.cancelAnimationFrame ||\r\n            function(id) {\r\n              clearTimeout(id);\r\n            };\r\n          return cancelAnimationFrame.call(window, id);\r\n        };\r\n\r\n    return {\r\n      requestAnimationFrame: requestAnimationFrame,\r\n      cancelAnimationFrame: cancelAnimationFrame\r\n    };\r\n  })();\r\n\r\n  SmoothieChart.defaultSeriesPresentationOptions = {\r\n    lineWidth: 1,\r\n    strokeStyle: '#ffffff'\r\n  };\r\n\r\n  /**\r\n   * Adds a <code>TimeSeries</code> to this chart, with optional presentation options.\r\n   *\r\n   * Presentation options should be of the form (defaults shown):\r\n   *\r\n   * <pre>\r\n   * {\r\n   *   lineWidth: 1,\r\n   *   strokeStyle: '#ffffff',\r\n   *   fillStyle: undefined\r\n   * }\r\n   * </pre>\r\n   */\r\n  SmoothieChart.prototype.addTimeSeries = function(timeSeries, options) {\r\n    this.seriesSet.push({timeSeries: timeSeries, options: Util.extend({}, SmoothieChart.defaultSeriesPresentationOptions, options)});\r\n    if (timeSeries.options.resetBounds && timeSeries.options.resetBoundsInterval > 0) {\r\n      timeSeries.resetBoundsTimerId = setInterval(\r\n        function() {\r\n          timeSeries.resetBounds();\r\n        },\r\n        timeSeries.options.resetBoundsInterval\r\n      );\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Removes the specified <code>TimeSeries</code> from the chart.\r\n   */\r\n  SmoothieChart.prototype.removeTimeSeries = function(timeSeries) {\r\n    // Find the correct timeseries to remove, and remove it\r\n    var numSeries = this.seriesSet.length;\r\n    for (var i = 0; i < numSeries; i++) {\r\n      if (this.seriesSet[i].timeSeries === timeSeries) {\r\n        this.seriesSet.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n    // If a timer was operating for that timeseries, remove it\r\n    if (timeSeries.resetBoundsTimerId) {\r\n      // Stop resetting the bounds, if we were\r\n      clearInterval(timeSeries.resetBoundsTimerId);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets render options for the specified <code>TimeSeries</code>.\r\n   *\r\n   * As you may use a single <code>TimeSeries</code> in multiple charts with different formatting in each usage,\r\n   * these settings are stored in the chart.\r\n   */\r\n  SmoothieChart.prototype.getTimeSeriesOptions = function(timeSeries) {\r\n    // Find the correct timeseries to remove, and remove it\r\n    var numSeries = this.seriesSet.length;\r\n    for (var i = 0; i < numSeries; i++) {\r\n      if (this.seriesSet[i].timeSeries === timeSeries) {\r\n        return this.seriesSet[i].options;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Brings the specified <code>TimeSeries</code> to the top of the chart. It will be rendered last.\r\n   */\r\n  SmoothieChart.prototype.bringToFront = function(timeSeries) {\r\n    // Find the correct timeseries to remove, and remove it\r\n    var numSeries = this.seriesSet.length;\r\n    for (var i = 0; i < numSeries; i++) {\r\n      if (this.seriesSet[i].timeSeries === timeSeries) {\r\n        var set = this.seriesSet.splice(i, 1);\r\n        this.seriesSet.push(set[0]);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Instructs the <code>SmoothieChart</code> to start rendering to the provided canvas, with specified delay.\r\n   *\r\n   * @param canvas the target canvas element\r\n   * @param delayMillis an amount of time to wait before a data point is shown. This can prevent the end of the series\r\n   * from appearing on screen, with new values flashing into view, at the expense of some latency.\r\n   */\r\n  SmoothieChart.prototype.streamTo = function(canvas, delayMillis) {\r\n    this.canvas = canvas;\r\n    this.delay = delayMillis;\r\n    this.start();\r\n  };\r\n\r\n  /**\r\n   * Make sure the canvas has the optimal resolution for the device's pixel ratio.\r\n   */\r\n  SmoothieChart.prototype.resize = function() {\r\n    // TODO this function doesn't handle the value of enableDpiScaling changing during execution\r\n    if (!this.options.enableDpiScaling || !window || window.devicePixelRatio === 1)\r\n      return;\r\n\r\n    var dpr = window.devicePixelRatio;\r\n    var width = parseInt(this.canvas.getAttribute('width'));\r\n    var height = parseInt(this.canvas.getAttribute('height'));\r\n\r\n    if (!this.originalWidth || (Math.floor(this.originalWidth * dpr) !== width)) {\r\n      this.originalWidth = width;\r\n      this.canvas.setAttribute('width', (Math.floor(width * dpr)).toString());\r\n      this.canvas.style.width = width + 'px';\r\n      this.canvas.getContext('2d').scale(dpr, dpr);\r\n    }\r\n\r\n    if (!this.originalHeight || (Math.floor(this.originalHeight * dpr) !== height)) {\r\n      this.originalHeight = height;\r\n      this.canvas.setAttribute('height', (Math.floor(height * dpr)).toString());\r\n      this.canvas.style.height = height + 'px';\r\n      this.canvas.getContext('2d').scale(dpr, dpr);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Starts the animation of this chart.\r\n   */\r\n  SmoothieChart.prototype.start = function() {\r\n    if (this.frame) {\r\n      // We're already running, so just return\r\n      return;\r\n    }\r\n\r\n    // Renders a frame, and queues the next frame for later rendering\r\n    var animate = function() {\r\n      this.frame = SmoothieChart.AnimateCompatibility.requestAnimationFrame(function() {\r\n        this.render();\r\n        animate();\r\n      }.bind(this));\r\n    }.bind(this);\r\n\r\n    animate();\r\n  };\r\n\r\n  /**\r\n   * Stops the animation of this chart.\r\n   */\r\n  SmoothieChart.prototype.stop = function() {\r\n    if (this.frame) {\r\n      SmoothieChart.AnimateCompatibility.cancelAnimationFrame(this.frame);\r\n      delete this.frame;\r\n    }\r\n  };\r\n\r\n  SmoothieChart.prototype.updateValueRange = function() {\r\n    // Calculate the current scale of the chart, from all time series.\r\n    var chartOptions = this.options,\r\n        chartMaxValue = Number.NaN,\r\n        chartMinValue = Number.NaN;\r\n\r\n    for (var d = 0; d < this.seriesSet.length; d++) {\r\n      // TODO(ndunn): We could calculate / track these values as they stream in.\r\n      var timeSeries = this.seriesSet[d].timeSeries;\r\n      if (!isNaN(timeSeries.maxValue)) {\r\n        chartMaxValue = !isNaN(chartMaxValue) ? Math.max(chartMaxValue, timeSeries.maxValue) : timeSeries.maxValue;\r\n      }\r\n\r\n      if (!isNaN(timeSeries.minValue)) {\r\n        chartMinValue = !isNaN(chartMinValue) ? Math.min(chartMinValue, timeSeries.minValue) : timeSeries.minValue;\r\n      }\r\n    }\r\n\r\n    // Scale the chartMaxValue to add padding at the top if required\r\n    if (chartOptions.maxValue != null) {\r\n      chartMaxValue = chartOptions.maxValue;\r\n    } else {\r\n      chartMaxValue *= chartOptions.maxValueScale;\r\n    }\r\n\r\n    // Set the minimum if we've specified one\r\n    if (chartOptions.minValue != null) {\r\n      chartMinValue = chartOptions.minValue;\r\n    }\r\n\r\n    // If a custom range function is set, call it\r\n    if (this.options.yRangeFunction) {\r\n      var range = this.options.yRangeFunction({min: chartMinValue, max: chartMaxValue});\r\n      chartMinValue = range.min;\r\n      chartMaxValue = range.max;\r\n    }\r\n\r\n    if (!isNaN(chartMaxValue) && !isNaN(chartMinValue)) {\r\n      var targetValueRange = chartMaxValue - chartMinValue;\r\n      var valueRangeDiff = (targetValueRange - this.currentValueRange);\r\n      var minValueDiff = (chartMinValue - this.currentVisMinValue);\r\n      this.isAnimatingScale = Math.abs(valueRangeDiff) > 0.1 || Math.abs(minValueDiff) > 0.1;\r\n      this.currentValueRange += chartOptions.scaleSmoothing * valueRangeDiff;\r\n      this.currentVisMinValue += chartOptions.scaleSmoothing * minValueDiff;\r\n    }\r\n\r\n    this.valueRange = { min: chartMinValue, max: chartMaxValue };\r\n  };\r\n\r\n  SmoothieChart.prototype.render = function(canvas, time) {\r\n    var nowMillis = new Date().getTime();\r\n\r\n    if (!this.isAnimatingScale) {\r\n      // We're not animating. We can use the last render time and the scroll speed to work out whether\r\n      // we actually need to paint anything yet. If not, we can return immediately.\r\n\r\n      // Render at least every 1/6th of a second. The canvas may be resized, which there is\r\n      // no reliable way to detect.\r\n      var maxIdleMillis = Math.min(1000/6, this.options.millisPerPixel);\r\n\r\n      if (nowMillis - this.lastRenderTimeMillis < maxIdleMillis) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.resize();\r\n\r\n    this.lastRenderTimeMillis = nowMillis;\r\n\r\n    canvas = canvas || this.canvas;\r\n    time = time || nowMillis - (this.delay || 0);\r\n\r\n    // Round time down to pixel granularity, so motion appears smoother.\r\n    time -= time % this.options.millisPerPixel;\r\n\r\n    var context = canvas.getContext('2d'),\r\n        chartOptions = this.options,\r\n        dimensions = { top: 0, left: 0, width: canvas.clientWidth, height: canvas.clientHeight },\r\n        // Calculate the threshold time for the oldest data points.\r\n        oldestValidTime = time - (dimensions.width * chartOptions.millisPerPixel),\r\n        valueToYPixel = function(value) {\r\n          var offset = value - this.currentVisMinValue;\r\n          return this.currentValueRange === 0\r\n            ? dimensions.height\r\n            : dimensions.height - (Math.round((offset / this.currentValueRange) * dimensions.height));\r\n        }.bind(this),\r\n        timeToXPixel = function(t) {\r\n          return Math.round(dimensions.width - ((time - t) / chartOptions.millisPerPixel));\r\n        };\r\n\r\n    this.updateValueRange();\r\n\r\n    context.font = chartOptions.labels.fontSize + 'px ' + chartOptions.labels.fontFamily;\r\n\r\n    // Save the state of the canvas context, any transformations applied in this method\r\n    // will get removed from the stack at the end of this method when .restore() is called.\r\n    context.save();\r\n\r\n    // Move the origin.\r\n    context.translate(dimensions.left, dimensions.top);\r\n\r\n    // Create a clipped rectangle - anything we draw will be constrained to this rectangle.\r\n    // This prevents the occasional pixels from curves near the edges overrunning and creating\r\n    // screen cheese (that phrase should need no explanation).\r\n    context.beginPath();\r\n    context.rect(0, 0, dimensions.width, dimensions.height);\r\n    context.clip();\r\n\r\n    // Clear the working area.\r\n    context.save();\r\n    context.fillStyle = chartOptions.grid.fillStyle;\r\n    context.clearRect(0, 0, dimensions.width, dimensions.height);\r\n    context.fillRect(0, 0, dimensions.width, dimensions.height);\r\n    context.restore();\r\n\r\n    // Grid lines...\r\n    context.save();\r\n    context.lineWidth = chartOptions.grid.lineWidth;\r\n    context.strokeStyle = chartOptions.grid.strokeStyle;\r\n    // Vertical (time) dividers.\r\n    if (chartOptions.grid.millisPerLine > 0) {\r\n      context.beginPath();\r\n      for (var t = time - (time % chartOptions.grid.millisPerLine);\r\n           t >= oldestValidTime;\r\n           t -= chartOptions.grid.millisPerLine) {\r\n        var gx = timeToXPixel(t);\r\n        if (chartOptions.grid.sharpLines) {\r\n          gx -= 0.5;\r\n        }\r\n        context.moveTo(gx, 0);\r\n        context.lineTo(gx, dimensions.height);\r\n      }\r\n      context.stroke();\r\n      context.closePath();\r\n    }\r\n\r\n    // Horizontal (value) dividers.\r\n    for (var v = 1; v < chartOptions.grid.verticalSections; v++) {\r\n      var gy = Math.round(v * dimensions.height / chartOptions.grid.verticalSections);\r\n      if (chartOptions.grid.sharpLines) {\r\n        gy -= 0.5;\r\n      }\r\n      context.beginPath();\r\n      context.moveTo(0, gy);\r\n      context.lineTo(dimensions.width, gy);\r\n      context.stroke();\r\n      context.closePath();\r\n    }\r\n    // Bounding rectangle.\r\n    if (chartOptions.grid.borderVisible) {\r\n      context.beginPath();\r\n      context.strokeRect(0, 0, dimensions.width, dimensions.height);\r\n      context.closePath();\r\n    }\r\n    context.restore();\r\n\r\n    // Draw any horizontal lines...\r\n    if (chartOptions.horizontalLines && chartOptions.horizontalLines.length) {\r\n      for (var hl = 0; hl < chartOptions.horizontalLines.length; hl++) {\r\n        var line = chartOptions.horizontalLines[hl],\r\n            hly = Math.round(valueToYPixel(line.value)) - 0.5;\r\n        context.strokeStyle = line.color || '#ffffff';\r\n        context.lineWidth = line.lineWidth || 1;\r\n        context.beginPath();\r\n        context.moveTo(0, hly);\r\n        context.lineTo(dimensions.width, hly);\r\n        context.stroke();\r\n        context.closePath();\r\n      }\r\n    }\r\n\r\n    // For each data set...\r\n    for (var d = 0; d < this.seriesSet.length; d++) {\r\n      context.save();\r\n      var timeSeries = this.seriesSet[d].timeSeries,\r\n          dataSet = timeSeries.data,\r\n          seriesOptions = this.seriesSet[d].options;\r\n\r\n      // Delete old data that's moved off the left of the chart.\r\n      timeSeries.dropOldData(oldestValidTime, chartOptions.maxDataSetLength);\r\n\r\n      // Set style for this dataSet.\r\n      context.lineWidth = seriesOptions.lineWidth;\r\n      context.strokeStyle = seriesOptions.strokeStyle;\r\n      // Draw the line...\r\n      context.beginPath();\r\n      // Retain lastX, lastY for calculating the control points of bezier curves.\r\n      var firstX = 0, lastX = 0, lastY = 0;\r\n      for (var i = 0; i < dataSet.length && dataSet.length !== 1; i++) {\r\n        var x = timeToXPixel(dataSet[i][0]),\r\n            y = valueToYPixel(dataSet[i][1]);\r\n\r\n        if (i === 0) {\r\n          firstX = x;\r\n          context.moveTo(x, y);\r\n        } else {\r\n          switch (chartOptions.interpolation) {\r\n            case \"linear\":\r\n            case \"line\": {\r\n              context.lineTo(x,y);\r\n              break;\r\n            }\r\n            case \"bezier\":\r\n            default: {\r\n              // Great explanation of Bezier curves: http://en.wikipedia.org/wiki/Bezier_curve#Quadratic_curves\r\n              //\r\n              // Assuming A was the last point in the line plotted and B is the new point,\r\n              // we draw a curve with control points P and Q as below.\r\n              //\r\n              // A---P\r\n              //     |\r\n              //     |\r\n              //     |\r\n              //     Q---B\r\n              //\r\n              // Importantly, A and P are at the same y coordinate, as are B and Q. This is\r\n              // so adjacent curves appear to flow as one.\r\n              //\r\n              context.bezierCurveTo( // startPoint (A) is implicit from last iteration of loop\r\n                Math.round((lastX + x) / 2), lastY, // controlPoint1 (P)\r\n                Math.round((lastX + x)) / 2, y, // controlPoint2 (Q)\r\n                x, y); // endPoint (B)\r\n              break;\r\n            }\r\n            case \"step\": {\r\n              context.lineTo(x,lastY);\r\n              context.lineTo(x,y);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        lastX = x; lastY = y;\r\n      }\r\n\r\n      if (dataSet.length > 1) {\r\n        if (seriesOptions.fillStyle) {\r\n          // Close up the fill region.\r\n          context.lineTo(dimensions.width + seriesOptions.lineWidth + 1, lastY);\r\n          context.lineTo(dimensions.width + seriesOptions.lineWidth + 1, dimensions.height + seriesOptions.lineWidth + 1);\r\n          context.lineTo(firstX, dimensions.height + seriesOptions.lineWidth);\r\n          context.fillStyle = seriesOptions.fillStyle;\r\n          context.fill();\r\n        }\r\n\r\n        if (seriesOptions.strokeStyle && seriesOptions.strokeStyle !== 'none') {\r\n          context.stroke();\r\n        }\r\n        context.closePath();\r\n      }\r\n      context.restore();\r\n    }\r\n\r\n    // Draw the axis values on the chart.\r\n    if (!chartOptions.labels.disabled && !isNaN(this.valueRange.min) && !isNaN(this.valueRange.max)) {\r\n      var maxValueString = chartOptions.yMaxFormatter(this.valueRange.max, chartOptions.labels.precision),\r\n          minValueString = chartOptions.yMinFormatter(this.valueRange.min, chartOptions.labels.precision);\r\n      context.fillStyle = chartOptions.labels.fillStyle;\r\n      context.fillText(maxValueString, dimensions.width - context.measureText(maxValueString).width - 2, chartOptions.labels.fontSize);\r\n      context.fillText(minValueString, dimensions.width - context.measureText(minValueString).width - 2, dimensions.height - 2);\r\n    }\r\n\r\n    // Display timestamps along x-axis at the bottom of the chart.\r\n    if (chartOptions.timestampFormatter && chartOptions.grid.millisPerLine > 0) {\r\n      var textUntilX = dimensions.width - context.measureText(minValueString).width + 4;\r\n      for (var t = time - (time % chartOptions.grid.millisPerLine);\r\n           t >= oldestValidTime;\r\n           t -= chartOptions.grid.millisPerLine) {\r\n        var gx = timeToXPixel(t);\r\n        // Only draw the timestamp if it won't overlap with the previously drawn one.\r\n        if (gx < textUntilX) {\r\n          // Formats the timestamp based on user specified formatting function\r\n          // SmoothieChart.timeFormatter function above is one such formatting option\r\n          var tx = new Date(t),\r\n            ts = chartOptions.timestampFormatter(tx),\r\n            tsWidth = context.measureText(ts).width;\r\n          textUntilX = gx - tsWidth - 2;\r\n          context.fillStyle = chartOptions.labels.fillStyle;\r\n          context.fillText(ts, gx - tsWidth, dimensions.height - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    context.restore(); // See .save() above.\r\n  };\r\n\r\n  // Sample timestamp formatting function\r\n  SmoothieChart.timeFormatter = function(date) {\r\n    function pad2(number) { return (number < 10 ? '0' : '') + number }\r\n    return pad2(date.getHours()) + ':' + pad2(date.getMinutes()) + ':' + pad2(date.getSeconds());\r\n  };\r\n\r\n  exports.TimeSeries = TimeSeries;\r\n  exports.SmoothieChart = SmoothieChart;\r\n\r\n})(typeof exports === 'undefined' ? this : exports);\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/viewer.components/Viewer.Extensions.Dynamic/Viewing.Extension.IoT/IoT.Graph/smoothie.js","import IoTGraph from './IoT.Graph'\r\nimport './smoothie'\r\n\r\nexport default IoTGraph\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/viewer.components/Viewer.Extensions.Dynamic/Viewing.Extension.IoT/IoT.Graph/index.js","import { TimeSeries as SmoothieTimeSeries, SmoothieChart } from './smoothie'\r\nimport React from 'react'\r\n\r\n/////////////////////////////////////////////////////////////////\r\n//\r\n//\r\n/////////////////////////////////////////////////////////////////\r\nexport default class IoTGraph extends React.Component {\r\n\r\n  /////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////\r\n  constructor () {\r\n\r\n    super()\r\n\r\n    this.state = {\r\n      value: 0\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////\r\n  componentDidMount () {\r\n\r\n    this.thresholdSeries = new SmoothieTimeSeries()\r\n\r\n    this.dataSeries = new SmoothieTimeSeries()\r\n\r\n    this.chart = new SmoothieChart({\r\n      yRangeFunction: () => {\r\n        return {\r\n          min: this.props.min,\r\n          max: this.props.max\r\n        }\r\n      }\r\n    })\r\n\r\n    this.intervalId = 0\r\n\r\n    this.chart.addTimeSeries(this.thresholdSeries, {\r\n      strokeStyle: 'rgba(255, 0, 0, 1)',\r\n      fillStyle: 'rgba(255, 0, 0, 0.0)',\r\n      lineWidth: 1\r\n    })\r\n\r\n    this.chart.addTimeSeries(this.dataSeries, {\r\n      strokeStyle: 'rgba(0, 255, 0, 1)',\r\n      fillStyle: 'rgba(0, 255, 0, 0.2)',\r\n      lineWidth: 1\r\n    })\r\n\r\n    this.chart.streamTo(this.canvas, 100)\r\n\r\n    this.updateGraph(this.props)\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////\r\n  componentWillUnmount () {\r\n\r\n    clearInterval(this.intervalId)\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////\r\n  componentWillReceiveProps (props) {\r\n\r\n    if (props.guid !== this.props.guid) {\r\n\r\n      this.updateGraph(props)\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////\r\n  updateGraph (props) {\r\n\r\n    clearInterval(this.intervalId)\r\n\r\n    this.thresholdSeries.clear()\r\n    this.dataSeries.clear()\r\n\r\n    this.intervalId = setInterval(() => {\r\n\r\n      const t = new Date().getTime()\r\n      this.thresholdSeries.append(t, this.props.threshold)\r\n\r\n      const value = this.props.value ||\r\n        props.randomBase + (0.5 - Math.random()) * props.randomRange\r\n\r\n      this.setState({\r\n        value\r\n      })\r\n\r\n      this.dataSeries.append(t, value)\r\n    }, 1000)\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////\r\n  render () {\r\n\r\n    const width = isNaN(this.props.dimensions.width)\r\n      ? 100 : this.props.dimensions.width\r\n\r\n    const height = isNaN(this.props.dimensions.height)\r\n      ? 100 : Math.floor((this.props.dimensions.height - 1)/3)\r\n\r\n    const label =\r\n      `Tag ${this.props.tagId} - ` +\r\n      ` ${this.props.name}: ${this.state.value.toFixed(2)}`\r\n\r\n    const style = {height}\r\n\r\n    return (\r\n      <div style={style}>\r\n        <div className=\"graph-title\">\r\n          <label>\r\n            { label }\r\n          </label>\r\n        </div>\r\n        <canvas className=\"graph\" width={width} height={height-30}\r\n          ref={ (div) => this.canvas = div }> \r\n        </canvas> \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/viewer.components/Viewer.Extensions.Dynamic/Viewing.Extension.IoT/IoT.Graph/IoT.Graph.js"],"sourceRoot":""}